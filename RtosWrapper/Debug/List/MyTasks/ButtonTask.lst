###############################################################################
#
# IAR ANSI C/C++ Compiler V9.30.1.335/W64 for ARM         20/Jun/2025  22:26:52
# Copyright 1999-2022 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        D:\RtosWrapper\minor-labs\repo\RtosWrapper\MyTasks\ButtonTask.cpp
#    Command line                 =
#        -f
#        D:\RtosWrapper\minor-labs\repo\RtosWrapper\Debug\Obj\MyTasks\ButtonTask.o.rsp
#        (D:\RtosWrapper\minor-labs\repo\RtosWrapper\MyTasks\ButtonTask.cpp -lC
#        D:\RtosWrapper\minor-labs\repo\RtosWrapper\Debug\List\MyTasks -lA
#        D:\RtosWrapper\minor-labs\repo\RtosWrapper\Debug\List\MyTasks -o
#        D:\RtosWrapper\minor-labs\repo\RtosWrapper\Debug\Obj\MyTasks --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M4 -e
#        --fpu=VFPv4_sp --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.1\arm\inc\c\DLib_Config_Normal.h" -I
#        D:\RtosWrapper\minor-labs\repo\RtosWrapper\Rtos\ -I
#        D:\RtosWrapper\minor-labs\repo\RtosWrapper\Rtos\wrapper\ -I
#        D:\RtosWrapper\minor-labs\repo\RtosWrapper\Rtos\wrapper\FreeRtos\ -I
#        D:\RtosWrapper\minor-labs\repo\RtosWrapper\Rtos\FreeRtos\ -I
#        D:\RtosWrapper\minor-labs\repo\RtosWrapper\Rtos\FreeRtos\include\ -I
#        D:\RtosWrapper\minor-labs\repo\RtosWrapper\Rtos\FreeRtos\portable\ -I
#        D:\RtosWrapper\minor-labs\repo\RtosWrapper\Rtos\FreeRtos\portable\Common\
#        -I
#        D:\RtosWrapper\minor-labs\repo\RtosWrapper\Rtos\FreeRtos\portable\IAR\
#        -I
#        D:\RtosWrapper\minor-labs\repo\RtosWrapper\Rtos\FreeRtos\portable\IAR\ARM_CM4F\
#        -I
#        D:\RtosWrapper\minor-labs\repo\RtosWrapper\Rtos\FreeRtos\portable\MemMang\
#        -I D:\RtosWrapper\minor-labs\repo\RtosWrapper\MyTasks\ -I
#        D:\RtosWrapper\minor-labs\repo\RtosWrapper\Common\ -I
#        D:\RtosWrapper\minor-labs\repo\RtosWrapper\CMSIS\ -I
#        D:\RtosWrapper\minor-labs\repo\RtosWrapper\Application\ -I
#        D:\RtosWrapper\minor-labs\repo\RtosWrapper\Application\Diagnostic\ -I
#        D:\RtosWrapper\minor-labs\repo\RtosWrapper\AHardware\ -I
#        D:\RtosWrapper\minor-labs\repo\RtosWrapper\AHardware\GpioPort\ -I
#        D:\RtosWrapper\minor-labs\repo\RtosWrapper\AHardware\IrqController\ -I
#        D:\RtosWrapper\minor-labs\repo\RtosWrapper\..\CortexLib\AbstractHardware\Pin\
#        -I
#        D:\RtosWrapper\minor-labs\repo\RtosWrapper\..\CortexLib\AbstractHardware\Registers\STM32F411\FieldValues\
#        -I
#        D:\RtosWrapper\minor-labs\repo\RtosWrapper\..\CortexLib\AbstractHardware\Registers\STM32F411\
#        -I
#        D:\RtosWrapper\minor-labs\repo\RtosWrapper\..\CortexLib\AbstractHardware\Registers\
#        -I
#        D:\RtosWrapper\minor-labs\repo\RtosWrapper\..\CortexLib\AbstractHardware\Port\
#        -I
#        D:\RtosWrapper\minor-labs\repo\RtosWrapper\..\CortexLib\AbstractHardware\Atomic\
#        -I D:\RtosWrapper\minor-labs\repo\RtosWrapper\..\CortexLib\Common\ -I
#        D:\RtosWrapper\minor-labs\repo\RtosWrapper\..\CortexLib\Common\Singleton\
#        -I
#        D:\RtosWrapper\minor-labs\repo\RtosWrapper\..\CortexLib\Common\RomObject\
#        -I
#        D:\RtosWrapper\minor-labs\repo\RtosWrapper\Application\Implementation\
#        -I D:\RtosWrapper\minor-labs\repo\RtosWrapper\Application\Contracts\
#        -I
#        D:\RtosWrapper\minor-labs\repo\RtosWrapper\Application\Implementation\Modes\
#        -I
#        D:\RtosWrapper\minor-labs\repo\RtosWrapper\Application\Implementation\
#        -Ol --c++ --no_exceptions --no_rtti) --dependencies=n
#        D:\RtosWrapper\minor-labs\repo\RtosWrapper\Debug\Obj\MyTasks\ButtonTask.o.d
#    Locale                       =  C
#    List file                    =
#        D:\RtosWrapper\minor-labs\repo\RtosWrapper\Debug\List\MyTasks\ButtonTask.lst
#    Object file                  =
#        D:\RtosWrapper\minor-labs\repo\RtosWrapper\Debug\Obj\MyTasks\ButtonTask.o
#    Runtime model:                  
#      __CPP_Exceptions           =  Disabled
#      __CPP_Language             =  C++14
#      __CPP_Library              =  DLib
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_file_descriptor     =  0
#      __dlib_full_locale_support =  0
#      __dlib_version             =  6
#
###############################################################################

D:\RtosWrapper\minor-labs\repo\RtosWrapper\MyTasks\ButtonTask.cpp
      1          #include <iostream> // for std::cout, endl
      2          #include "ButtonTask.h"

   \                                 In section .text, align 2
   \   __vfp OsWrapper::TicksPerSecond std::chrono::duration_cast<OsWrapper::TicksPerSecond, __int64_t, std::milli>(std::chrono::duration<__int64_t, std::milli> const &)
   \                     _ZNSt6chrono13duration_castINS_8durationIjSt5ratioILx10ELx1000EEEExS2_ILx1ELx1000EEEENSt9enable_ifIXsr3std6chrono12_Is_durationIT_EE5valueES7_E4typeERKNS1_IT0_T1_EE: (+1)
   \        0x0   0xB5E0             PUSH     {R5-R7,LR}
   \        0x2   0x.... 0x....      BL       _ZNKSt6chrono8durationIxSt5ratioILx1ELx1000EEE5countEv
   \        0x6   0x220A             MOVS     R2,#+10
   \        0x8   0x2300             MOVS     R3,#+0
   \        0xA   0x.... 0x....      BL       __aeabi_ldivmod
   \        0xE   0x9000             STR      R0,[SP, #+0]
   \       0x10   0x4669             MOV      R1,SP
   \       0x12   0xA801             ADD      R0,SP,#+4
   \       0x14   0x.... 0x....      BL       _ZNSt6chrono8durationIjSt5ratioILx10ELx1000EEEC1IjvEERKT_
   \       0x18   0x9801             LDR      R0,[SP, #+4]
   \       0x1A   0xBD0E             POP      {R1-R3,PC}

   \                                 In section .text, align 2
   \   __vfp std::chrono::duration<uint32_t, std::ratio<10LL, 1'000LL>>::duration<uint32_t, void>(uint32_t const &)
   \                     _ZNSt6chrono8durationIjSt5ratioILx10ELx1000EEEC1IjvEERKT_: (+1)
   \        0x0   0x6809             LDR      R1,[R1, #+0]
   \        0x2   0x6001             STR      R1,[R0, #+0]
   \        0x4   0x4770             BX       LR

   \                                 In section .text, align 2
   \   __vfp __int64_t std::chrono::duration<__int64_t, std::milli>::count() const
   \                     _ZNKSt6chrono8durationIxSt5ratioILx1ELx1000EEE5countEv: (+1)
   \        0x0   0xE9D0 0x0100      LDRD     R0,R1,[R0, #+0]
   \        0x4   0x4770             BX       LR

   \                                 In section .text, align 2
   \   __vfp uint32_t std::chrono::duration<uint32_t, std::ratio<10LL, 1'000LL>>::count() const
   \                     _ZNKSt6chrono8durationIjSt5ratioILx10ELx1000EEE5countEv: (+1)
   \        0x0   0x6800             LDR      R0,[R0, #+0]
   \        0x2   0x4770             BX       LR

   \                                 In section .text, align 2
   \   __vfp void OsWrapper::RtosWrapper::wSleep(uint32_t)
   \                     _ZN9OsWrapper11RtosWrapper6wSleepEj: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x.... 0x....      BL       vTaskDelay
   \        0x6   0xBD01             POP      {R0,PC}

   \                                 In section .text, align 2
   \   __vfp bool OsWrapper::RtosWrapper::wMailBoxPut(void * &, void const *)
   \                     _ZN9OsWrapper11RtosWrapper11wMailBoxPutERPvPKv: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x2300             MOVS     R3,#+0
   \        0x4   0x2200             MOVS     R2,#+0
   \        0x6   0x6800             LDR      R0,[R0, #+0]
   \        0x8   0x.... 0x....      BL       xQueueGenericSendFromISR
   \        0xC   0x2801             CMP      R0,#+1
   \        0xE   0xD101             BNE.N    ??wMailBoxPut_0
   \       0x10   0x2001             MOVS     R0,#+1
   \       0x12   0xE000             B.N      ??wMailBoxPut_1
   \                     ??wMailBoxPut_0: (+1)
   \       0x14   0x2000             MOVS     R0,#+0
   \                     ??wMailBoxPut_1: (+1)
   \       0x16   0xB2C0             UXTB     R0,R0
   \       0x18   0xBD02             POP      {R1,PC}

   \                                 In section .text, align 2
   \   __vfp void OsWrapper::IThread::Sleep(std::chrono::milliseconds)
   \                     _ZN9OsWrapper7IThread5SleepENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE: (+1)
   \        0x0   0xB583             PUSH     {R0,R1,R7,LR}
   \        0x2   0xB082             SUB      SP,SP,#+8
   \        0x4   0xA802             ADD      R0,SP,#+8
   \        0x6   0x.... 0x....      BL       _ZNSt6chrono13duration_castINS_8durationIjSt5ratioILx10ELx1000EEEExS2_ILx1ELx1000EEEENSt9enable_ifIXsr3std6chrono12_Is_durationIT_EE5valueES7_E4typeERKNS1_IT0_T1_EE
   \        0xA   0x9000             STR      R0,[SP, #+0]
   \        0xC   0x4668             MOV      R0,SP
   \        0xE   0x.... 0x....      BL       _ZNKSt6chrono8durationIjSt5ratioILx10ELx1000EEE5countEv
   \       0x12   0x.... 0x....      BL       _ZN9OsWrapper11RtosWrapper6wSleepEj
   \       0x16   0xB005             ADD      SP,SP,#+20
   \       0x18   0xBD00             POP      {PC}

   \                                 In section .text, align 2
   \   __vfp bool OsWrapper::MailBox<bool, 1U>::Put(bool const &)
   \                     _ZN9OsWrapper7MailBoxIbLj1EE3PutERKb: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x.... 0x....      BL       _ZN9OsWrapper11RtosWrapper11wMailBoxPutERPvPKv
   \        0x6   0xBD02             POP      {R1,PC}
      3          //#include "criticalsection.hpp" // for crit sec
      4          
      5          

   \                                 In section .text, align 4, keep-with-next
      6          void ButtonTask::Execute()
      7          {
   \                     _ZN10ButtonTask7ExecuteEv: (+1)
   \        0x0   0xB51C             PUSH     {R2-R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
      8            for (;;)
      9            {
     10              //mLockCoutMutex.Lock();
     11              //OsWrapper::CriticalSection criticalSection;
     12              /*
     13              std::cout << "buttonTask: ";
     14              for (int i = 0; i <= 10; ++i)
     15              {
     16                std::cout << "buttonTask: " << i;
     17              }
     18              std::cout << std::endl;
     19              */
     20          
     21              if (mButton.IsPressed())
   \                     ??Execute_1: (+1)
   \        0x4   0xF8D4 0x0468      LDR      R0,[R4, #+1128]
   \        0x8   0xF8D4 0x1468      LDR      R1,[R4, #+1128]
   \        0xC   0x6809             LDR      R1,[R1, #+0]
   \        0xE   0x6809             LDR      R1,[R1, #+0]
   \       0x10   0x4788             BLX      R1
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xD011             BEQ.N    ??Execute_2
     22              {
     23                const auto mailboxPutResult = mMailBox.Put(true);
   \       0x16   0x2001             MOVS     R0,#+1
   \       0x18   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \       0x1C   0x4669             MOV      R1,SP
   \       0x1E   0xF8D4 0x046C      LDR      R0,[R4, #+1132]
   \       0x22   0x.... 0x....      BL       _ZN9OsWrapper7MailBoxIbLj1EE3PutERKb
     24                assert(mailboxPutResult);
   \       0x26   0xB2C0             UXTB     R0,R0
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD106             BNE.N    ??Execute_2
   \       0x2C   0x2218             MOVS     R2,#+24
   \       0x2E   0x4906             LDR.N    R1,??Execute_0
   \       0x30   0x4806             LDR.N    R0,??Execute_0+0x4
   \       0x32   0x.... 0x....      BL       __aeabi_assert
   \       0x36   0x.... 0x....      BL       __iar_EmptyStepPoint
     25              }
     26              //mLockCoutMutex.UnLock();
     27          
     28              Sleep(mDelay);
   \                     ??Execute_2: (+1)
   \       0x3A   0xF514 0x628C      ADDS     R2,R4,#+1120
   \       0x3E   0xE9D2 0x0100      LDRD     R0,R1,[R2, #+0]
   \       0x42   0x.... 0x....      BL       _ZN9OsWrapper7IThread5SleepENSt6chrono8durationIxSt5ratioILx1ELx1000EEEE
   \       0x46   0xE7DD             B.N      ??Execute_1
   \                     ??Execute_0:
   \       0x48   0x....'....        DC32     ?_1
   \       0x4C   0x....'....        DC32     ?_0
     29            }
     30          }

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x6D 0x61          DC8 "mailboxPutResult"

   \              0x69 0x6C    

   \              0x62 0x6F    

   \              0x78 0x50    

   \              0x75 0x74    

   \              0x52 0x65    

   \              0x73 0x75    

   \              0x6C 0x74    

   \              0x00
   \       0x11                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x44 0x3A          DC8 0x44, 0x3A, 0x5C, 0x52, 0x74, 0x6F, 0x73, 0x57

   \              0x5C 0x52    

   \              0x74 0x6F    

   \              0x73 0x57
   \        0x8   0x72 0x61          DC8 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x5C, 0x6D

   \              0x70 0x70    

   \              0x65 0x72    

   \              0x5C 0x6D
   \       0x10   0x69 0x6E          DC8 0x69, 0x6E, 0x6F, 0x72, 0x2D, 0x6C, 0x61, 0x62

   \              0x6F 0x72    

   \              0x2D 0x6C    

   \              0x61 0x62
   \       0x18   0x73 0x5C          DC8 0x73, 0x5C, 0x72, 0x65, 0x70, 0x6F, 0x5C, 0x52

   \              0x72 0x65    

   \              0x70 0x6F    

   \              0x5C 0x52
   \       0x20   0x74 0x6F          DC8 0x74, 0x6F, 0x73, 0x57, 0x72, 0x61, 0x70, 0x70

   \              0x73 0x57    

   \              0x72 0x61    

   \              0x70 0x70
   \       0x28   0x65 0x72          DC8 0x65, 0x72, 0x5C, 0x4D, 0x79, 0x54, 0x61, 0x73

   \              0x5C 0x4D    

   \              0x79 0x54    

   \              0x61 0x73
   \       0x30   0x6B 0x73          DC8 0x6B, 0x73, 0x5C, 0x42, 0x75, 0x74, 0x74, 0x6F

   \              0x5C 0x42    

   \              0x75 0x74    

   \              0x74 0x6F
   \       0x38   0x6E 0x54          DC8 0x6E, 0x54, 0x61, 0x73, 0x6B, 0x2E, 0x63, 0x70

   \              0x61 0x73    

   \              0x6B 0x2E    

   \              0x63 0x70
   \       0x40   0x70 0x00          DC8 0x70, 0
   \       0x42                      DS8 2

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   ButtonTask::Execute()
        16   -- Indirect call
        16   -> OsWrapper::IThread::Sleep(std::chrono::milliseconds)
        16   -> OsWrapper::MailBox<bool, 1U>::Put(bool const &)
        16   -> __aeabi_assert
        16   -> __iar_EmptyStepPoint
      24   OsWrapper::IThread::Sleep(std::chrono::milliseconds)
        24   -> OsWrapper::RtosWrapper::wSleep(uint32_t)
        24   -> std::chrono::duration<uint32_t, std::ratio<10LL, 1'000LL>>::count() const
        24   -> std::chrono::duration_cast<OsWrapper::TicksPerSecond, __int64_t, std::milli>(std::chrono::duration<__int64_t, std::milli> const &)
       8   OsWrapper::MailBox<bool, 1U>::Put(bool const &)
         8   -> OsWrapper::RtosWrapper::wMailBoxPut(void * &, void const *)
       8   OsWrapper::RtosWrapper::wMailBoxPut(void * &, void const *)
         8   -> xQueueGenericSendFromISR
       8   OsWrapper::RtosWrapper::wSleep(uint32_t)
         8   -> vTaskDelay
       0   std::chrono::duration<__int64_t, std::milli>::count() const
       0   std::chrono::duration<uint32_t, std::ratio<10LL, 1'000LL>>::count() const
       0   std::chrono::duration<uint32_t, std::ratio<10LL, 1'000LL>>::duration<uint32_t, void>(uint32_t const &)
      16   std::chrono::duration_cast<OsWrapper::TicksPerSecond, __int64_t, std::milli>(std::chrono::duration<__int64_t, std::milli> const &)
        16   -> std::chrono::duration<__int64_t, std::milli>::count() const
        16   -> std::chrono::duration<uint32_t, std::ratio<10LL, 1'000LL>>::duration<uint32_t, void>(uint32_t const &)
        16 __aeabi_ldivmod


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      20  ?_0
      68  ?_1
      80  ButtonTask::Execute()
      26  OsWrapper::IThread::Sleep(std::chrono::milliseconds)
       8  OsWrapper::MailBox<bool, 1U>::Put(bool const &)
      26  OsWrapper::RtosWrapper::wMailBoxPut(void * &, void const *)
       8  OsWrapper::RtosWrapper::wSleep(uint32_t)
       6  std::chrono::duration<__int64_t, std::milli>::count() const
       4  std::chrono::duration<uint32_t, std::ratio<10LL, 1'000LL>>::count() const
       6  std::chrono::duration<uint32_t, std::ratio<10LL, 1'000LL>>::duration<uint32_t, void>(uint32_t const &)
      28  std::chrono::duration_cast<OsWrapper::TicksPerSecond, __int64_t, std::milli>(std::chrono::duration<__int64_t, std::milli> const &)
     176  -- Other

 
 264 bytes in section .rodata
 192 bytes in section .text
 
 80 bytes of CODE  memory (+ 112 bytes shared)
 88 bytes of CONST memory (+ 176 bytes shared)

Errors: none
Warnings: none
